msg(3)
======

NAME
----
msg - work with zerosync messages

SYNOPSIS
--------
----
// Contructor, creates new zs message
zs_msg_t *
zs_msg_new (int cmd);

// Destructor, destroys zs message
void
zs_msg_destroy (zs_msg_t **self_p);

// Constructor, creates new zs file meta data
zs_fmetadata_t *
zs_fmetadata_new ();

// Destructor, destroys file meta data
void
zs_fmetadata_destroy (zs_fmetadata_t **self_p);

// --------------------------------------------------------------------------
// Receive & Send

// receive messages
zs_msg_t *
zs_msg_recv (void *input);

// send LAST_STATE
int 
zs_msg_send_last_state (void *output, uint64_t state);

 
// send FILE_LIST
int
zs_msg_send_file_list (void *output, zlist_t *filemeta_list);
 
// send NO_UPDATE
int
zs_msg_send_no_update (void *output);
 
// send REQUEST_FILES
int
zs_msg_send_request_files (void *output, zlist_t *fpaths);

// send GIVE CREDIT
int
zs_msg_send_give_credit (void *output, uint64_t credit);

// send SEND CHUNK
int
zs_msg_send_chunk (void *output, uint64_t sequence, char *file_path, uint64_t offset, zframe_t *chunk);
// --------------------------------------------------------------------------
// zs_msg_t get & set

// getter/setter message command    
int
zs_msg_get_cmd (zs_msg_t *self);

// getter/setter message state    
void 
zs_msg_set_state (zs_msg_t *self, uint64_t state);

uint64_t 
zs_msg_get_state (zs_msg_t *self);

// getter/setter message file meta list
void 
zs_msg_set_fmetadata (zs_msg_t *self, zlist_t *filemeta_list);

zlist_t *
zs_msg_get_fmetadata (zs_msg_t *self);

// Iterate file meta data

zs_fmetadata_t *
zs_msg_fmetadata_first (zs_msg_t *self);

zs_fmetadata_t *
zs_msg_fmetadata_next (zs_msg_t *self);

void
zs_msg_fmetadata_append (zs_msg_t *self, zs_fmetadata_t *fmetadata_item);

// getter/setter message file paths

void 
zs_msg_set_fpaths (zs_msg_t *self, zlist_t *fpaths);

zlist_t *
zs_msg_get_fpaths (zs_msg_t *self);

// Iterate fpaths

char *
zs_msg_fpaths_first (zs_msg_t *self);

char *
zs_msg_fpaths_next (zs_msg_t *self);

void
zs_msg_fpaths_append (zs_msg_t *self, char *format, ...);

// getter/setter message credit
void
zs_msg_set_credit (zs_msg_t *self, uint64_t credit);

uint64_t
zs_msg_get_credit (zs_msg_t *self);

// getter/setter message chunk
void
zs_msg_set_chunk (zs_msg_t *self, zframe_t *chunk);

zframe_t* 
zs_msg_get_chunk (zs_msg_t *self);

// getter/setter message sequence
void
zs_msg_set_sequence (zs_msg_t *self, uint64_t seq);

uint64_t
zs_msg_get_sequence (zs_msg_t *self);

// getter/setter message file-path
void
zs_msg_set_file_path (zs_msg_t *self, char *format, ...);

char*
zs_msg_get_file_path (zs_msg_t *self);

// getter/setter message offset
void
zs_msg_set_offset (zs_msg_t *self, uint64_t offset);

uint64_t
zs_msg_get_offset (zs_msg_t *self);


// --------------------------------------------------------------------------
// zs_fmetadata_t get & set


// getter/setter file path
void
zs_fmetadata_set_path (zs_fmetadata_t *self, char* format, ...);

char *
zs_fmetadata_get_path (zs_fmetadata_t *self);

// getter/setter file size
void
zs_fmetadata_set_size (zs_fmetadata_t *self, uint64_t size);

uint64_t 
zs_fmetadata_get_size (zs_fmetadata_t *self);

// getter/setter timestamp
void
zs_fmetadata_set_timestamp (zs_fmetadata_t *self, uint64_t timestamp);

uint64_t
zs_fmetadata_get_timestamp (zs_fmetadata_t *self);

// Self test this class
int
    zs_msg_test ();
----

DESCRIPTION
-----------

zs_msg - work with ZeroSync messages


EXAMPLE
-------
.From msg_test method
----
    /* 1. create zmq context */
    void *context = zmq_ctx_new ();
    /* 2. create sockets */
    void *sink = zmq_socket (context, ZMQ_DEALER);
    void *sender = zmq_socket (context, ZMQ_DEALER);
    /* 3. bind/connect sockets */
    int rc = zmq_bind (sink, "inproc://zframe.test");
    assert(rc == 0);
    zmq_connect (sender, "inproc://zframe.test");
    
    /* [SEND] LAST STATE */
    zs_msg_send_last_state (sender, 0xFF);
    
    /* [RECV] LAST STATE */
    zs_msg_t *self = zs_msg_recv (sink);
    uint64_t last_state = zs_msg_get_state (self);
    printf("Command %d\n", zs_msg_get_cmd (self));
    printf("last state %"PRIx64"\n", last_state);
    
    // cleanup 
    zs_msg_destroy (&self);

    /* [SEND] FILE LIST */
    zlist_t *filemeta_list = zlist_new ();
    zs_fmetadata_t *fmetadata = zs_fmetadata_new ();
    zs_fmetadata_set_path (fmetadata, "%s", "a.txt");
    zs_fmetadata_set_size (fmetadata, 0x1533);
    zs_fmetadata_set_timestamp (fmetadata, 0x1dfa533);
    zlist_append(filemeta_list, fmetadata);
    zs_fmetadata_t *fmetadata2 = zs_fmetadata_new ();
    zs_fmetadata_set_path (fmetadata2, "%s", "b.txt");
    zs_fmetadata_set_size (fmetadata2, 0x1544);
    zs_fmetadata_set_timestamp (fmetadata2, 0x1dfa544);
    zlist_append(filemeta_list, fmetadata2);

    
    zs_msg_send_file_list (sender, filemeta_list);
    
    /* [RECV] FILE LIST */
    self = zs_msg_recv (sink);
    fmetadata = zs_msg_fmetadata_first (self);
    printf("Command %d\n", zs_msg_get_cmd (self));
    while (fmetadata) {
        char *path = zs_fmetadata_get_path (fmetadata);
        uint64_t size = zs_fmetadata_get_size (fmetadata);
        uint64_t timestamp = zs_fmetadata_get_timestamp (fmetadata);
        printf("%s %"PRIx64" %"PRIx64"\n", path, size, timestamp);
        
        free (path);
        fmetadata = zs_msg_fmetadata_next (self);
    }

    // cleanup
    zs_msg_destroy (&self);
   
    /* [SEND] NO UPDATE */
    zs_msg_send_no_update(sender);

    /* [RECV] NO UPDATE */
    self = zs_msg_recv (sink);
    printf("Command %d\n", zs_msg_get_cmd (self));
    
    // cleanup
    zs_msg_destroy (&self);
   

    /* [SEND] REQUEST FILES */
    zlist_t *paths = zlist_new ();
    zlist_append(paths, "test1.txt");
    zlist_append(paths, "test2.txt");
    zlist_append(paths, "test3.txt");

    zs_msg_send_request_files (sender, paths);

    /* [RECV] REQUEST FILES */
    self = zs_msg_recv (sink);
    printf("Command %d\n", zs_msg_get_cmd (self));
    char *path = zs_msg_fpaths_first (self);
    while (path) {
        printf("%s\n", path);
        // next
        free(path);
        path = zs_msg_fpaths_next (self);
    }

    // cleanup
    zs_msg_destroy (&self);

    /* 4. close & destroy */
    zmq_close (sink);
    zmq_close (sender);
    zmq_ctx_destroy (context);
----

